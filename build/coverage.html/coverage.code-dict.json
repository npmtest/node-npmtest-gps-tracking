{"/home/travis/build/npmtest/node-npmtest-gps-tracking/test.js":"/* istanbul instrument in package npmtest_gps_tracking */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gps-tracking/lib.npmtest_gps_tracking.js":"/* istanbul instrument in package npmtest_gps_tracking */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gps_tracking = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gps_tracking = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gps-tracking/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gps-tracking && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gps_tracking */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gps_tracking\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gps_tracking.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_gps_tracking.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gps_tracking.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_gps_tracking.__dirname + '/lib.npmtest_gps_tracking.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gps-tracking/node_modules/gps-tracking/index.js":"module.exports = require('./lib/main');","/home/travis/build/npmtest/node-npmtest-gps-tracking/node_modules/gps-tracking/lib/main.js":"util\t\t\t= require('util');\nEventEmitter\t= require('events').EventEmitter;\nnet\t\t\t\t= require('net');\nextend\t\t\t= require('node.extend');\nfunctions\t\t= require('./functions');\n\nutil.inherits(Device, EventEmitter);\nutil.inherits(server, EventEmitter);\n\nfunction server(opts, callback) {\n\tif (!(this instanceof server))\n\t\treturn new server(opts, callback);\n\tEventEmitter.call(this);\n\tvar defaults = {\n\t\tdebug:\t\t\t\t\t\tfalse,\n\t\tport:\t\t\t\t\t\t8080,\n\t\tdevice_adapter:\t\t\t\tfalse\n\t};\n\n\t//Merge default options with user options\n\tthis.opts = extend(defaults, opts);\n\n\tvar thisServer = this;\n\tthis.devices = [];\n\tthis.db = false;\n\n\tthis.server = false;\n\tthis.availableAdapters = {\n\t\tTK103:\t\t'./adapters/tk103'\n\t};\n\n\t/****************************\n\tSOME FUNCTIONS\n\t*****************************/\n\t/* */\n\tthis.setAdapter = function(adapter){\n\t\tif (typeof adapter.adapter != 'function')\n\t\t\tthrow 'The adapter needs an adpater() method to start an instance of it';\n\t\tthis.device_adapter = adapter;\n\t};\n\n\tthis.getAdapter = function() {\n\t\treturn this.device_adapter;\n\t};\n\n\tthis.addAdaptar = function(model, Obj) {\n\t\tthis.availableAdapters.push(model);\n\t};\n\n\tthis.init = function(cb) {\n\t\t//Set debug\n\t\tthisServer.setDebug(this.opts.debug);\n\n\t\t/*****************************\n\t\tDEVICE ADAPTER INITIALIZATION\n\t\t******************************/\n\t\tif (thisServer.opts.device_adapter === false)\n\t\t\tthrow 'The app don\\'t set the device_adapter to use. Which model is sending data to this server?';\n\n\t\tif (typeof thisServer.opts.device_adapter == 'string') {\n\n\t\t\t//Check if the selected model has an available adapter registered\n\t\t\tif (typeof this.availableAdapters[this.opts.device_adapter] == 'undefined')\n\t\t\t\tthrow 'The class adapter for ' + this.opts.device_adapter + ' doesn\\'t exists';\n\n\t\t\t//Get the adapter\n\t\t\tvar adapterFile = (this.availableAdapters[this.opts.device_adapter]);\n\n\t\t\tthis.setAdapter(require(adapterFile));\n\n\t\t} else {\n\t\t\t//IF THE APP PASS THE ADEPTER DIRECTLY\n\t\t\tthisServer.setAdapter(this.opts.device_adapter);\n\t\t}\n\n\t\tthisServer.emit('before_init');\n\t\tif (typeof cb == 'function') cb();\n\t\tthisServer.emit('init');\n\n\t\t/* FINAL INIT MESSAGE */\n\t\tconsole.log('\\n=================================================\\nFRESHWORK GPS LISTENER running at port ' + thisServer.opts.port + '\\nEXPECTING DEVICE MODEL:  ' + thisServer.getAdapter().model_name + '\\n=================================================\\n');\n\t};\n\n\tthis.addAdaptar = function(model,Obj){\n\t\tthis.adapters.push(model);\n\t};\n\n\tthis.do_log = function (msg,from){\n\t\t//If debug is disabled, return false\n\t\tif(this.getDebug() === false)return false;\n\n\t\t//If from parameter is not set, default is server.\n\t\tif(typeof(from) == \"undefined\")from = \"SERVER\";\n\n\t\tmsg = \"#\" + from + \": \" + msg;\n\t\tconsole.log(msg);\n\n\t};\n\n\t/****************************************\n\tSOME SETTERS & GETTERS\n\t****************************************/\n\tthis.setDebug = function(val){\n\t\tthis.debug = (val === true);\n\t};\n\n\tthis.getDebug = function(){\n\t\treturn this.debug;\n\t};\n\n\n\n\t//Init app\n\tthis.init(function(){\n\t\t/*************************************\n\t\tAFTER INITIALIZING THE APP...\n\t\t*************************************/\n\t\tthisServer.server = net.createServer(function (connection) {\n\t\t\t//Now we are listening!\n\n\t\t\t//We create an new device and give the an adapter to parse the incomming messages\n\t\t\tconnection.device = new Device(thisServer.getAdapter(),connection,thisServer);\n\t\t\tthisServer.devices.push(connection);\n\n\n\t\t\t//Once we receive data...\n\t\t\tconnection.on('data', function (data) {\n\t\t\t\tconnection.device.emit(\"data\",data);\n\t\t\t});\n\n\t\t\t// Remove the device from the list when it leaves\n\t\t\tconnection.on('end', function () {\n\t\t\t\tthisServer.devices.splice(thisServer.devices.indexOf(connection), 1);\n\t\t\t\tconnection.device.emit(\"disconnected\");\n\t\t\t});\n\n\t\t\tcallback(connection.device,connection);\n\n\t\t\tconnection.device.emit('connected');\n\t\t}).listen(opts.port);\n\t});\n\n\t/* Search a device by ID */\n\tthis.find_device = function(device_id){\n\t\tfor(var i in this.devices){\n\t\t\tvar dev = this.devices[i].device;\n\t\t\tif(dev.uid == device_id)return dev;\n\t\t}\n\t\treturn false;\n\t};\n\n\t/* SEND A MESSAGE TO DEVICE ID X */\n\tthis.send_to = function(device_id,msg){\n\t\tvar dev = this.find_device(device_id);\n\t\tdev.send(msg);\n\t};\n\n\treturn this;\n}\n\n\n\n/*************************************************************\n\n                    THE DEVICE CLASS\n**************************************************************/\n\nfunction Device(adapter,connection,gps_server){\n\t/* Inherits EventEmitter class */\n\tEventEmitter.call(this);\n\n\tvar this_device \t= this;\n\n\tthis.connection \t= connection;\n\tthis.server \t\t= gps_server;\n\tthis.adapter\t\t= adapter.adapter(this);\n\n\tthis.uid = false;\n\tthis.ip = connection.ip;\n\tthis.port = connection.port;\n\tthis.name = false;\n\tthis.loged = false;\n\n\n\tinit();\n\t/* init */\n\tfunction init(){\n\n\t}\n\n\t/****************************************\n\tRECEIVING DATA FROM THE DEVICE\n\t****************************************/\n\tthis.on(\"data\",function(data) {\n\t\tmsg_parts = this_device.adapter.parse_data(data);\n\n\t\tif(this.getUID() === false && typeof(msg_parts.device_id) == \"undefined\"){\n\t\t\tthrow \"The adapter doesn't return the device_id and is not defined\";\n\t\t}\n\n\t\tif(msg_parts === false) { //something bad happened\n\t\t\tthis_device.do_log(\"The message (\" + data + \") can't be parsed. Discarding...\");\n\t\t\treturn;\n\t\t}\n\n\t\tif(typeof(msg_parts.cmd) == \"undefined\")throw \"The adapter doesn't return the command (cmd) parameter\";\n\n\t\t//If the UID of the devices it hasn't been setted, do it now.\n\t\tif(this.getUID() === false)\n\t\t\tthis.setUID(msg_parts.device_id);\n\n\t\t/************************************\n\t\tEXECUTE ACTION\n\t\t************************************/\n\t\tthis_device.make_action(msg_parts.action,msg_parts);\n\t});\n\n\tthis.make_action = function(action, msg_parts) {\n\t\t//If we're not loged\n\t\tif(action != \"login_request\" && !this_device.loged){\n\t\t\tthis_device.adapter.request_login_to_device();\n\t\t\tconsole.log(this_device.getUID()+\" is trying to '\" + action + \"' but it isn't loged. Action wasn't executed\");\n\t\t\treturn false;\n\t\t}\n\t\tswitch(action){\n\t\t\tcase \"login_request\":\n\t\t\t\tthis_device.login_request(msg_parts);\n\t\t\t\tbreak;\n\t\t\tcase \"ping\":\n\t\t\t\tthis_device.ping(msg_parts);\n\t\t\t\tbreak;\n\t\t\tcase \"alarm\":\n\t\t\t\tthis_device.receive_alarm(msg_parts);\n\t\t\t\tbreak;\n\t\t\tcase \"other\":\n\t\t\t\tthis_device.adapter.run_other(msg_parts.cmd,msg_parts);\n\t\t\t\tbreak;\n\t\t}\n\t};\n\n\n\n\t/****************************************\n\tLOGIN & LOGOUT\n\t****************************************/\n\tthis.login_request = function(msg_parts) {\n\t\tthis_device.do_log(\"I'm requesting to be loged.\");\n\t\tthis_device.emit(\"login_request\",this.getUID(),msg_parts);\n\t};\n\tthis.login_authorized = function(val, msg_parts) {\n\t\tif(val){\n\t\t\tthis.do_log(\"Device \" + this_device.getUID() + \" has been authorized. Welcome!\");\n\t\t\tthis.loged = true;\n\t\t\tthis.adapter.authorize(msg_parts);\n\t\t}else{\n\t\t\tthis.do_log(\"Device \" + this_device.getUID() + \" not authorized. Login request rejected\");\n\t\t}\n\t};\n\tthis.logout = function(){\n\t\tthis.loged = false;\n\t\tthis.adapter.logout();\n\t};\n\n\n\t/****************************************\n\tRECEIVING GPS POSITION FROM THE DEVICE\n\t****************************************/\n\tthis.ping = function(msg_parts){\n\t\tvar gps_data = this.adapter.get_ping_data(msg_parts);\n\t\tif(gps_data === false){\n\t\t\t//Something bad happened\n\t\t\tthis_device.do_log(\"GPS Data can't be parsed. Discarding packet...\");\n\t\t\treturn false;\n\t\t}\n\n\t\t/* Needs:\n\t\tlatitude, longitude, time\n\t\tOptionals:\n\t\torientation, speed, mileage, etc */\n\n\t\tthis_device.do_log(\"Position received ( \" + gps_data.latitude + \",\" + gps_data.longitude + \" )\");\n\n\t\tgps_data.inserted=new Date();\n\t\tgps_data.from_cmd = msg_parts.cmd;\n\t\tthis_device.emit(\"ping\", gps_data);\n\n\n\t};\n\n\t/****************************************\n\tRECEIVING ALARM\n\t****************************************/\n\tthis.receive_alarm = function(msg_parts) {\n\t\t//We pass the message parts to the adapter and they have to say wich type of alarm it is.\n\t\tvar alarm_data = this_device.adapter.receive_alarm(msg_parts);\n\t\t/* Alarm data must return an object with at least:\n\t\talarm_type: object with this format:\n\t\t\t{'code':'sos_alarm','msg':'SOS Alarm activated by the driver'}\n\t\t*/\n\t\tthis_device.emit(\"alarm\", alarm_data.code, alarm_data, msg_parts);\n\t};\n\n\n\t/****************************************\n\tSET REFRESH TIME\n\t****************************************/\n\tthis.set_refresh_time = function(interval, duration) {\n\t\tthis_device.adapter.set_refresh_time(interval, duration);\n\t};\n\n\t/* adding methods to the adapter */\n\tthis.adapter.get_device = function(){\n\t\treturn device;\n\t};\n\tthis.send = function(msg){\n\t\tthis.emit(\"send_data\",msg);\n\t\tthis.connection.write(msg);\n\t\tthis.do_log(\"Sending to \"+this_device.getUID() + \": \" + msg);\n\t};\n\n\tthis.do_log = function (msg){\n\t\tthis_device.server.do_log(msg,this_device.getUID());\n\t};\n\n\tthis.send_byte_array = function(array){\n\t\tthis.emit(\"send_byte_data\",array);\n\t\tvar buff = new Buffer(array);\n\t\tconsole.log(buff);\n\t\tthis.do_log(\"Sending to \" + this_device.uid + \": <Array: [\" + array + \"]>\");\n\t};\n\n\t/****************************************\n\tSOME SETTERS & GETTERS\n\t****************************************/\n\tthis.getName = function(){\n\t\treturn this.name;\n\t};\n\tthis.setName = function(name) {\n\t\tthis.name = name;\n\t};\n\n\tthis.getUID = function() {\n\t\treturn this.uid;\n\t};\n\tthis.setUID = function(uid) {\n\t\tthis.uid = uid;\n\t};\n\n}\n\n\nexports.server = server;\nexports.version = require('../package').version;\n","/home/travis/build/npmtest/node-npmtest-gps-tracking/node_modules/gps-tracking/lib/functions.js":"/*****************************************\nFUNCTIONS \n******************************************/\nexports.rad = function(x) {\n  return x * Math.PI / 180;\n};\n\n/*\n@param p1: {lat:X,lng:Y}\n@param p2: {lat:X,lng:Y}\n*/\nexports.get_distance = function(p1, p2) {\n\tvar R = 6378137; // Earth’s mean radius in meter\n\tvar dLat = exports.rad(p2.lat - p1.lat);\n\tvar dLong = exports.rad(p2.lng - p1.lng);\n\tvar a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n\tMath.cos(exports.rad(p1.lat)) * Math.cos(exports.rad(p2.lat)) *\n\tMath.sin(dLong / 2) * Math.sin(dLong / 2);\n\tvar c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n\tvar d = R * c;\n\treturn d; // returns the distance in meter\n};\n\nexports.send = function(socket,msg){\n\tsocket.write(msg);\n\tconsole.log(\"Sending to \"+socket.name+\": \"+msg);\n}\n\nexports.parse_data = function(data){\n\tdata = data.replace(/(\\r\\n|\\n|\\r)/gm,\"\"); //Remove 3 type of break lines\n\tvar cmd_start = data.indexOf(\"B\"); //al the incomming messages has a cmd starting with 'B'\n\tif(cmd_start > 13)throw \"Device ID is longer than 12 chars!\";\n\tvar parts={\n\t\t\"start\" \t\t: data.substr(0,1),\n\t\t\"device_id\" \t: data.substring(1,cmd_start),\n\t\t\"cmd\" \t\t\t: data.substr(cmd_start,4),\n\t\t\"data\" \t\t\t: data.substring(cmd_start+4,data.length-1),\n\t\t\"finish\" \t\t: data.substr(data.length-1,1)\n\t};\n\treturn parts;\n}\nexports.parse_gps_data = function(str){\n\tvar data = {\n\t\t\"date\"\t\t\t: str.substr(0,6),\n\t\t\"availability\"\t: str.substr(6,1),\n\t\t\"latitude\"\t\t: gps_minute_to_decimal(parseFloat(str.substr(7,9))),\n\t\t\"latitude_i\"\t: str.substr(16,1),\n\t\t\"longitude\"\t: gps_minute_to_decimal(parseFloat(str.substr(17,9))),\n\t\t\"longitude_i\"\t: str.substr(27,1),\n\t\t\"speed\"\t\t\t: str.substr(28,5),\n\t\t\"time\"\t\t\t: str.substr(33,6),\n\t\t\"orientation\"\t: str.substr(39,6),\n\t\t\"io_state\"\t\t: str.substr(45,8),\n\t\t\"mile_post\"\t: str.substr(53,1),\n\t\t\"mile_data\"\t: parseInt(str.substr(54,8),16)\n\t};\n\treturn data;\t\n}\n\nexports.send_to = function(socket,cmd,data){\n\tif(typeof(socket.device_id) == \"undefined\")throw \"The socket is not paired with a device_id yet\";\n\tvar str = gps_format.start;\n\tstr += socket.device_id+gps_format.separator+cmd;\n\tif(typeof(data) != \"undefined\")str += gps_format.separator+data;\n\tstr += gps_format.end;\n\tsend(socket,str);\n\t//Example: (<DEVICE_ID>|<CMD>|<DATA>) - separator: | ,start: (, end: )\n}\n\nexports.minute_to_decimal = function(pos,pos_i){\n\tif(typeof(pos_i) == \"undefined\")pos_i = \"N\";\n\tvar dg = parseInt(pos/100);\n\tvar minutes = pos-(dg*100);\n\tvar res = (minutes/60)+dg;\n\treturn (pos_i.toUpperCase()==\"S\" || pos_i.toUpperCase()==\"W\")?res*-1:res;\t\n}\n\n// Send a message to all clients\nexports.broadcast = function(message, sender) {\n\tclients.forEach(function (client) {\n\t  if (client === sender) return;\n\t  client.write(message);\n\t});\n\tprocess.stdout.write(message+\"\\n\");\n}\nexports.data_to_hex_array = function(data){\n\t\tvar arr = [];\n\t\tfor (var i  = 0; i < data.length; i++)arr.push( data[i].toString(16));\n\t\treturn arr;\n\t}\n\t/* RETRUN AN INTEGER FROM A HEX CHAR OR integer */\nexports.hex_to_int = function(hex_char){\n\treturn parseInt(hex_char,16);\n}\nexports.sum_hex_array = function(hex_array){\n\tvar sum = 0;\n\tfor(var i in hex_array)sum+=exports.hex_to_int(hex_array[i]);\n\treturn sum;\n}\nexports.hex_array_to_hex_str = function(hex_array){\n\tvar str = \"\";\n\tfor(var i in hex_array){\n\t\tvar char;\n\t\tif(typeof(hex_array[i]) == \"number\")char = hex_array[i].toString(16)\n\t\telse char = hex_array[i].toString();\n\t\tstr += exports.str_pad(char,2,'0');\n\t}\n\treturn str;\n}\nexports.str_pad = function(input, length, string) {\n\tstring = string || '0'; input = input + '';\n\treturn input.length >= length ? input : new Array(length - input.length + 1).join(string) + input;\n}\nexports.crc_itu_get_verification = function(hex_data){\n\tvar crc16 = require(\"crc-itu\").crc16;\n\tif(typeof(hex_data) == \"String\")str = hex_data\n\telse str = exports.hex_array_to_hex_str(hex_data);\n\treturn crc16(str, 'hex');\n}","/home/travis/build/npmtest/node-npmtest-gps-tracking/node_modules/gps-tracking/lib/adapters/tk103.js":"/* */\nf = require(\"../functions\");\n\nexports.protocol=\"GPS103\";\nexports.model_name=\"TK103\";\nexports.compatible_hardware=[\"TK103/supplier\"];\n\nvar adapter = function(device){\n\tif(!(this instanceof adapter)) return new adapter(device);\n\t\n\tthis.format = {\"start\":\"(\",\"end\":\")\",\"separator\":\"\"}\n\tthis.device = device;\n\t\n\t/*******************************************\n\tPARSE THE INCOMING STRING FROM THE DECIVE \n\tYou must return an object with a least: device_id, cmd and type.\n\treturn device_id: The device_id\n\treturn cmd: command from the device.\n\treturn type: login_request, ping, etc. \n\t*******************************************/\n\tthis.parse_data = function(data){\n\t\tdata = data.toString();\n\t\tvar cmd_start = data.indexOf(\"B\"); //al the incomming messages has a cmd starting with 'B'\n\t\tif(cmd_start > 13)throw \"Device ID is longer than 12 chars!\";\n\t\tvar parts={\n\t\t\t\"start\" \t\t: data.substr(0,1), \n\t\t\t\"device_id\" \t: data.substring(1,cmd_start),//mandatory\n\t\t\t\"cmd\" \t\t\t: data.substr(cmd_start,4), //mandatory\n\t\t\t\"data\" \t\t\t: data.substring(cmd_start+4,data.length-1),\n\t\t\t\"finish\" \t\t: data.substr(data.length-1,1)\n\t\t};\n\t\tswitch(parts.cmd){\n\t\t\tcase \"BP05\":\n\t\t\t\tparts.action=\"login_request\";\t\n\t\t\t\tbreak;\n\t\t\tcase \"BR00\":\n\t\t\t\tparts.action=\"ping\";\n\t\t\t\tbreak;\n\t\t\tcase \"BO01\":\n\t\t\t\tparts.action=\"alarm\";\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tparts.action=\"other\";\n\t\t}\n\t\t\n\t\treturn parts;\n\t}\n\tthis.authorize =function(){\n\t\tthis.send_comand(\"AP05\");\n\t}\n\tthis.run_other = function(cmd,msg_parts){\n\t\tswitch(cmd){\n\t\t\tcase \"BP00\": //Handshake\n\t\t\t\tthis.device.send(this.format_data(this.device.uid+\"AP01HSO\"));\n\t\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tthis.request_login_to_device = function(){\n\t\t//@TODO: Implement this.\t\n\t}\n\t\n\tthis.receive_alarm = function(msg_parts){\n\t\t//@TODO: implement this\n\t\t\n\t\t//Maybe we can save the gps data too.\n\t\t//gps_data = msg_parts.data.substr(1);\n\t\talarm_code = msg_parts.data.substr(0,1);\n\t\talarm = false;\n\t\tswitch(alarm_code.toString()){\n\t\t\tcase \"0\":\n\t\t\t\talarm = {\"code\":\"power_off\",\"msg\":\"Vehicle Power Off\"};\n\t\t\t\tbreak;\n\t\t\tcase \"1\":\n\t\t\t\talarm = {\"code\":\"accident\",\"msg\":\"The vehicle suffers an acciden\"};\n\t\t\t\tbreak;\n\t\t\tcase \"2\":\n\t\t\t\talarm = {\"code\":\"sos\",\"msg\":\"Driver sends a S.O.S.\"};\n\t\t\t\tbreak;\n\t\t\tcase \"3\":\n\t\t\t\talarm = {\"code\":\"alarming\",\"msg\":\"The alarm of the vehicle is activated\"};\n\t\t\t\tbreak;\n\t\t\tcase \"4\":\n\t\t\t\talarm = {\"code\":\"low_speed\",\"msg\":\"Vehicle is below the min speed setted\"};\n\t\t\t\tbreak;\n\t\t\tcase \"5\":\n\t\t\t\talarm = {\"code\":\"overspeed\",\"msg\":\"Vehicle is over the max speed setted\"};\n\t\t\t\tbreak;\n\t\t\tcase \"6\":\n\t\t\t\talarm = {\"code\":\"gep_fence\",\"msg\":\"Out of geo fence\"};\n\t\t\t\tbreak;\n\t\t}\n\t\tthis.send_comand(\"AS01\",alarm_code.toString());\n\t\treturn alarm\n\t}\n\t\n\t\n\tthis.get_ping_data = function(msg_parts){\n\t\tvar str = msg_parts.data;\n\t\tvar data = {\n\t\t\t\"date\"\t\t\t: str.substr(0,6),\n\t\t\t\"availability\"\t: str.substr(6,1),\n\t\t\t\"latitude\"\t\t: functions.minute_to_decimal(parseFloat(str.substr(7,9)),str.substr(16,1)),\n\t\t\t\"longitude\"\t: functions.minute_to_decimal(parseFloat(str.substr(17,9)),str.substr(27,1)),\n\t\t\t\"speed\"\t\t\t: parseFloat(str.substr(28,5)),\n\t\t\t\"time\"\t\t\t: str.substr(33,6),\n\t\t\t\"orientation\"\t: str.substr(39,6),\n\t\t\t\"io_state\"\t\t: str.substr(45,8),\n\t\t\t\"mile_post\"\t: str.substr(53,1),\n\t\t\t\"mile_data\"\t: parseInt(str.substr(54,8),16)\n\t\t};\n\t\tvar datetime = \"20\"+data.date.substr(0,2)+\"/\"+data.date.substr(2,2)+\"/\"+data.date.substr(4,2);\n\t\tdatetime += \" \"+data.time.substr(0,2)+\":\"+data.time.substr(2,2)+\":\"+data.time.substr(4,2)\n\t\tdata.datetime=new Date(datetime);\n\t\tres = {\n\t\t\tlatitude\t\t: data.latitude,\n\t\t\tlongitude\t\t: data.longitude,\n\t\t\ttime\t\t\t: new Date(data.date+\" \"+data.time),\n\t\t\tspeed\t\t\t: data.speed,\n\t\t\torientation\t: data.orientation,\n\t\t\tmileage\t\t\t: data.mile_data\n\t\t}\n\t\treturn res;\t\n\t}\n\t\n\t/* SET REFRESH TIME */\n\tthis.set_refresh_time = function(interval,duration){\n\t\t//XXXXYYZZ\n\t\t//XXXX Hex interval for each message in seconds\n\t\t//YYZZ Total time for feedback\n\t\t//YY Hex hours\n\t\t//ZZ Hex minutes\n\t\tvar hours = parseInt(duration/3600);\n\t\tvar minutes = parseInt((duration-hours*3600)/60);\n\t\tvar time = f.str_pad(interval.toString(16),4,'0')+ f.str_pad(hours.toString(16),2,'0')+ f.str_pad(minutes.toString(16),2,'0')\n\t\tthis.send_comand(\"AR00\",time);\n\t}\n\t\n\t/* INTERNAL FUNCTIONS */\n\t\n\tthis.send_comand = function(cmd,data){\n\t\tvar msg = [this.device.uid,cmd,data];\n\t\tthis.device.send(this.format_data(msg));\n\t}\n\tthis.format_data = function(params){\n\t\t/* FORMAT THE DATA TO BE SENT */\n\t\tvar str = this.format.start;\n\t\tif(typeof(params) == \"string\"){\n\t\t\tstr+=params\n\t\t}else if(params instanceof Array){\n\t\t\tstr += params.join(this.format.separator);\n\t\t}else{\n\t\t\tthrow \"The parameters to send to the device has to be a string or an array\";\n\t\t}\n\t\tstr+= this.format.end;\n\t\treturn str;\t\n\t}\n}\nexports.adapter = adapter;\n"}